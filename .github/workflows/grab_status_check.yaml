name: Daily Grab Status Checker

on:
  schedule:
    - cron: '0 4 * * *'   # 12:00 PM MYT
    - cron: '0 6 * * *'   # 2:00 PM MYT
    - cron: '0 8 * * *'   # 4:00 PM MYT
    - cron: '0 10 * * *'  # 6:00 PM MYT
    - cron: '0 12 * * *'  # 8:00 PM MYT
    - cron: '0 14 * * *'  # 10:00 PM MYT
  workflow_dispatch:      # Allows manual triggering from GitHub interface

jobs:
  run-grab-status-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated to v4 for latest features and security

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Chromium and Chromedriver
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser chromium-chromedriver
          sudo ln -s /usr/lib/chromium-browser/chromedriver /usr/local/bin/chromedriver

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium pandas openpyxl

      - name: Create outlets.csv from secrets
        run: |
          printf "%b" "${{ secrets.OUTLETS_CSV_CONTENT }}" > outlets.csv

      - name: Debug: Print CSV content
        run: |
          cat outlets.csv

      - name: Update Chromedriver path in script
        run: |
          # Check if the script exists and update the Chromedriver path
          if [ -f "grab_claude.py" ]; then
            sed -i 's|"C:/Users/sheng/Desktop/TEST/chromedriver.exe"|"/usr/local/bin/chromedriver"|g' grab_claude.py
          else
            echo "Error: grab_claude.py not found"
            exit 1
          fi

      - name: Run Grab status check
        run: |
          python grab_claude.py

      - name: Get current date
        id: date
        run: echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT

      - name: Send email with results
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Grab Outlet Status Report - ${{ steps.date.outputs.date }}
          body: |
            Daily Grab outlet status report is attached.

            This report was automatically generated by GitHub Actions.
          to: ${{ secrets.EMAIL_RECIPIENT }}
          from: GitHub Actions <${{ secrets.EMAIL_SENDER }}>
          attachments: ./outlet_status.xlsx

      - name: Upload results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: outlet-status-report
          path: outlet_status.xlsx
          retention-days: 7  # Keep reports for a week